# This is a basic workflow to help you get started with Actions

name: CI

env:
  config: Release
  githubvsSolution: GitHubVS.sln
  vsixContainer: ${{ github.workspace }}\GitHub.VisualStudio.vsix
  
# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Nerdbank.GitVersioning
      uses: aarnott/nbgv@v0.3
      id: nbgv

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0

    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'

    - name: Add VSTest to PATH
      uses: darenm/Setup-VSTest@v1

    - name: NuGet restore ${{ env.githubvsSolution }}
      run: nuget restore ${{ env.githubvsSolution }}

    - name: MSBuild ${{ env.githubvsSolution }}
      run: |
        msbuild ${{ env.githubvsSolution }} /p:Configuration=${{ env.config }} /p:TargetVsixContainer=${{ env.vsixContainer }} /p:DeployExtension=False /p:GitHubVS_ClientId=${{ secrets.GitHubVS_ClientId }} /p:GitHubVS_ClientSecret=${{ secrets.GitHubVS_ClientSecret }}

    - name: Upload VSIX artifact
      uses: actions/upload-artifact@v1
      with:
        name: GitHubVS-${{ steps.nbgv.outputs.SemVer2 }}
        path: ${{ env.vsixContainer }}

    # We need to run '**\bin\**\*Tests.dll'
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.App.UnitTests\bin\Release\net46\GitHub.App.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.Exports.Reactive.UnitTests\bin\Release\net46\GitHub.Exports.Reactive.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.Exports.UnitTests\bin\Release\net46\GitHub.Exports.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.Extensions.UnitTests\bin\Release\net46\GitHub.Extensions.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.InlineReviews.UnitTests\bin\Release\net46\GitHub.InlineReviews.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.Services.Vssdk.UnitTests\bin\Release\net461\GitHub.Services.Vssdk.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.StartPage.UnitTests\bin\Release\net46\GitHub.StartPage.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.TeamFoundation.UnitTests\bin\Release\net46\GitHub.TeamFoundation.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.UI.UnitTests\bin\Release\net46\GitHub.UI.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\GitHub.VisualStudio.UnitTests\bin\Release\net46\GitHub.VisualStudio.UnitTests.dll
    - run: vstest.console /TestAdapterPath:test /Settings:test\test.runsettings test\MetricsTests\MetricsTests\bin\Release\MetricsTests.dll
