diff --git a/src/GitHub.App/Api/ApiClient.cs b/src/GitHub.App/Api/ApiClient.cs
index 6745236..79adcf3 100644
--- a/src/GitHub.App/Api/ApiClient.cs
+++ b/src/GitHub.App/Api/ApiClient.cs
@@ -8,6 +8,7 @@
 using System.Security.Cryptography;
 using System.Text;
 using GitHub.Primitives;
+using NLog;
 using NullGuard;
 using Octokit;
 using Octokit.Reactive;
@@ -18,8 +19,6 @@
 using System.Collections.Generic;
 using GitHub.Models;
 using GitHub.Extensions;
-using GitHub.Infrastructure;
-using Serilog;
 
 namespace GitHub.Api
 {
@@ -27,7 +26,7 @@ public partial class ApiClient : IApiClient
     {
         const string ScopesHeader = "X-OAuth-Scopes";
         const string ProductName = Info.ApplicationInfo.ApplicationDescription;
-        static readonly ILogger log = LogManager.ForContext<ApiClient>();
+        static readonly Logger log = LogManager.GetCurrentClassLogger();
         static readonly Uri userEndpoint = new Uri("user", UriKind.Relative);
 
         readonly IObservableGitHubClient gitHubClient;
@@ -85,7 +84,7 @@ public IObservable<UserAndScopes> GetUser()
             }
             else
             {
-                log.Error("Error reading scopes: /user succeeded but {ScopesHeader} was not present.", ScopesHeader);
+                log.Error($"Error reading scopes: /user succeeded but {ScopesHeader} was not present.");
             }
 
             return new UserAndScopes(response.Body, scopes);
@@ -176,7 +175,7 @@ static string GetSha256Hash(string input)
             }
             catch (Exception e)
             {
-                log.Error(e, "IMPOSSIBLE! Generating Sha256 hash caused an exception.");
+                log.Error("IMPOSSIBLE! Generating Sha256 hash caused an exception.", e);
                 return null;
             }
         }
@@ -194,14 +193,14 @@ static string GetMachineNameSafe()
             }
             catch (Exception e)
             {
-                log.Information(e, "Failed to retrieve host name using `DNS.GetHostName`.");
+                log.Info("Failed to retrieve host name using `DNS.GetHostName`.", e);
                 try
                 {
                     return Environment.MachineName;
                 }
                 catch (Exception ex)
                 {
-                    log.Information(ex, "Failed to retrieve host name using `Environment.MachineName`.");
+                    log.Info("Failed to retrieve host name using `Environment.MachineName`.", ex);
                     return "(unknown)";
                 }
             }
@@ -222,7 +221,7 @@ static string GetMachineIdentifier()
             }
             catch (Exception e)
             {
-                log.Information(e, "Could not retrieve MAC address. Fallback to using machine name.");
+                log.Info("Could not retrieve MAC address. Fallback to using machine name.", e);
                 return GetMachineNameSafe();
             }
         }
